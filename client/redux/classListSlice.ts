import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { RootState } from "./store";
import { ClassModel } from "lib/models";
import classListApi from "api/classApi";

export interface ClassListState {
  classList: Array<ClassModel>;
  returned: number;
  total: number;
  status: "fetching" | "done" | "init";
}

const initialState: ClassListState = {
  classList: [],
  total: 0,
  returned: 0,
  status: "init",
};

export const fetchMyClassListAsync = createAsyncThunk(
  "classList/fetchList",
  async (token: string, { rejectWithValue }) => {
    try {
      const response = await classListApi.fetchMyClassList(token);
      return {
        classList: response.data.data,
      };
    } catch (err) {
      // Use `err.response.data` as `action.payload` for a `rejected` action,
      // by explicitly returning it using the `rejectWithValue()` utility
      return rejectWithValue(err);
    }
  }
);

export const classListSlice = createSlice({
  name: "classList",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchMyClassListAsync.pending, (state) => {
        state.status = "fetching";
      })
      .addCase(fetchMyClassListAsync.fulfilled, (state, action) => {
        state.status = "done";
        state.classList = action.payload.classList.result;
        state.total = action.payload.classList.total;
        state.returned = action.payload.classList.returned;
      });
  },
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectMyClassList = (state: RootState) =>
  state.classList.classList;

export default classListSlice.reducer;
